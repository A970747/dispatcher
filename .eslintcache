[{"/home/a970747/coding/dispatcher/src/index.js":"1","/home/a970747/coding/dispatcher/src/App.js":"2","/home/a970747/coding/dispatcher/src/store/reducers/orderReducer.js":"3","/home/a970747/coding/dispatcher/src/store/reducers/routeReducer.js":"4","/home/a970747/coding/dispatcher/src/store/actions/orderAction.js":"5","/home/a970747/coding/dispatcher/src/store/actions/routeAction.js":"6","/home/a970747/coding/dispatcher/src/components/GenRoutes.js":"7","/home/a970747/coding/dispatcher/src/components/material-components/TabPanel.js":"8"},{"size":541,"mtime":1611687171153,"results":"9","hashOfConfig":"10"},{"size":9766,"mtime":1611716662326,"results":"11","hashOfConfig":"10"},{"size":370,"mtime":1611546189110,"results":"12","hashOfConfig":"10"},{"size":315,"mtime":1611326596894,"results":"13","hashOfConfig":"10"},{"size":708,"mtime":1611546152782,"results":"14","hashOfConfig":"10"},{"size":473,"mtime":1611546766023,"results":"15","hashOfConfig":"10"},{"size":6038,"mtime":1611701571975,"results":"16","hashOfConfig":"10"},{"size":482,"mtime":1611716809049,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1cujjw6",{"filePath":"21","messages":"22","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/a970747/coding/dispatcher/src/index.js",[],["37","38"],"/home/a970747/coding/dispatcher/src/App.js",["39","40","41","42","43","44","45","46","47","48","49"],"import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addOrder } from './store/actions/orderAction'\nimport GenRoutes from './components/GenRoutes';\nimport { AppBar, Button, Container, Grid, Tabs, Tab, TextField } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TabPanel from './components/material-components/TabPanel'\nimport app from './app.css';\n\nfunction App() {\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n      backgroundColor: theme.palette.background.paper,\n    }\n  }));\n\n  const [origin, setOrigin] = useState('');\n  const [destination, setDestination] = useState('');\n  const [orderDescription, setOrderDescription] = useState('');\n  const [originPlace, setOriginPlace] = useState('');\n  const [destPlace, setDestPlace] = useState('');\n  const [orderMap, setOrderMap] = useState(null);\n  const [originMarker, setOriginMarker] = useState(null);\n  const [destMarker, setDestMarker] = useState(null);\n  const [polylineArray, setPolylineArray] = useState([]);\n  const [tabValue, setTabValue] = React.useState(0);\n\n  const classes = useStyles();\n  const mapRef = useRef();\n  const originRef = useRef();\n  const destRef = useRef();\n\n  const dispatch = useDispatch();\n  const orders = useSelector(state => state.orders);\n\n  function a11yProps(index) {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`,\n    };\n  }\n\n  useEffect(() => {\n    const getData = async () => {\n      const map = await loadMap();\n      setOrderMap(map);\n    }\n\n    getData();\n  }, [])\n\n  useEffect(() => {\n    if (orderMap) {\n      setAutoComplete()\n    };\n\n  }, [orderMap])\n\n  useEffect(() => {\n    if (originMarker) originMarker.setMap(null)\n  }, [originPlace])\n\n  useEffect(() => {\n    if (destMarker) destMarker.setMap(null)\n  }, [destPlace])\n\n  useEffect(() => {\n    mapOrders();\n  }, [orders])\n\n  function loadMap() {\n    return new Promise((resolve, reject) => {\n      let map = new window.google.maps.Map(mapRef.current, {\n        zoom: 3,\n        center: { lat: 49.884, lng: -97.147 }\n      });\n\n      if (map) {\n        resolve(map)\n      } else {\n        reject('map not set');\n      }\n    })\n  };\n\n  function setAutoComplete() {\n    let originAutoRef = new window.google.maps.places.Autocomplete(originRef.current);\n    let destAutoRef = new window.google.maps.places.Autocomplete(destRef.current);\n    originAutoRef.setFields(['address_component', 'formatted_address', 'geometry']);\n    destAutoRef.setFields(['address_component', 'formatted_address', 'geometry']);\n    originAutoRef.setComponentRestrictions({ country: [\"us\", \"ca\", \"mx\"], });\n    destAutoRef.setComponentRestrictions({ country: [\"us\", \"ca\", \"mx\"], });\n\n    originAutoRef.addListener('place_changed', function () {\n      let originPlace = originAutoRef.getPlace();\n      if (originPlace) {\n        setOriginPlace(originPlace);\n        setOrigin(originPlace.formatted_address);\n        let latLng = { lat: originPlace.geometry.location.lat(), lng: originPlace.geometry.location.lng() };\n        let marker = addMarker(latLng, 'origin');\n        setOriginMarker(marker);\n        recenterMap(latLng);\n      }\n    })\n\n    destAutoRef.addListener('place_changed', function () {\n      let destPlace = destAutoRef.getPlace();\n      if (destPlace) {\n        setDestPlace(destPlace);\n        setDestination(destPlace.formatted_address);\n        let latLng = { lat: destPlace.geometry.location.lat(), lng: destPlace.geometry.location.lng() };\n        let marker = addMarker(latLng, 'dest');\n        setDestMarker(marker);\n        recenterMap(latLng);\n      }\n    })\n  }\n\n  //! this is inneficient, it should check to see whats new and just add whats new\n  function mapOrders() {\n    removeOrderPolylines();\n    let polycopy = []\n    orders.forEach(order => {\n      const decodedPath = window.google.maps.geometry.encoding.decodePath(order.directions);\n      let polyline = new window.google.maps.Polyline({\n        path: decodedPath,\n        strokeColor: order.color,\n        strokeOpacity: 1.0,\n        strokeWeight: 3,\n      });\n      polyline.setMap(orderMap);\n      polycopy.push(polyline);\n    })\n    setPolylineArray(polycopy);\n  }\n\n  //! need check to make sure user has selected a \"place\" so we can get geo info\n  async function createOrder(e) {\n    e.preventDefault();\n    let orderObj = {};\n\n    orderObj.origin = formatLocationReturn(originPlace);\n    orderObj.destination = formatLocationReturn(destPlace);\n    orderObj.description = orderDescription;\n    orderObj.directions = await getOrderDirections(orderObj);\n    orderObj.strtLnDist = calcStraightLineDist();\n\n    originMarker.setMap(null);\n    destMarker.setMap(null);\n    setOrderDescription('');\n    setOrigin('');\n    setDestination('');\n    setOriginPlace('')\n    setDestPlace('');\n    recenterMap(orderObj.origin.geoInfo);\n    dispatch(addOrder(orderObj));\n  }\n\n  function formatLocationReturn({ formatted_address, address_components, geometry: { location } } = {}) {\n    let returnObj = {};\n    returnObj.full_address = formatted_address;\n\n    [['locality', 'city'], ['administrative_area_level_1', 'region'], ['country', 'country']].forEach(geoLevel => {\n      address_components.forEach(addressLevel => {\n        if (addressLevel.types.find(type => geoLevel[0] === type)) {\n          returnObj[geoLevel[1]] = addressLevel.short_name;\n        }\n      })\n    })\n\n    returnObj.geoInfo = {\n      lat: location.lat(),\n      lng: location.lng(),\n      //! not sure if I need location, keeping it for now but so far latlng literals work\n      //  location: {...location},\n    }\n\n    return returnObj;\n  }\n\n  function getOrderDirections(order) {\n    const directionsService = new window.google.maps.DirectionsService();\n\n    let originLatLng = { ...order.origin.geoInfo };\n    let destLatLng = { ...order.destination.geoInfo };\n    let req = {\n      origin: originLatLng,\n      destination: destLatLng,\n      travelMode: 'DRIVING'\n    }\n\n    return new Promise((resolve, reject) => {\n      directionsService.route(req, (res, status) => {\n        if (status === 'OK') {\n          resolve(res.routes[0].overview_polyline)\n        } else {\n          reject(status);\n        }\n      })\n    })\n  }\n\n  const addMarker = (latLngObj, tail) => {\n    let marker = new window.google.maps.Marker({\n      position: { ...latLngObj },\n      label: (tail == 'origin') ? 'O' : 'D',\n      map: orderMap\n    });\n\n    return marker;\n  }\n\n  function recenterMap(latLngs) {\n    orderMap.setCenter({ ...latLngs })\n    orderMap.setZoom(5);\n  }\n\n  function removeOrderPolylines() {\n    polylineArray.forEach(each => {\n      each.setMap(null);\n    });\n  }\n\n  function toggleOrderPolylines() {\n    polylineArray.forEach(polyline => {\n      (polyline.visible == false) ? polyline.setVisible(true) : polyline.setVisible(false)\n    });\n  }\n\n  function calcStraightLineDist() {\n    const origin = originPlace.geometry.location\n    const dest = destPlace.geometry.location\n\n    let distance = window.google.maps.geometry.spherical.computeDistanceBetween(origin, dest);\n    let kms = distance / 1000;\n    return kms;\n  }\n\n  const handleTabValues = (event, newValue) => {\n    setTabValue(newValue);\n  };\n\n  return (\n    <>\n      <AppBar position=\"static\" >\n        <Tabs value={tabValue} onChange={handleTabValues} aria-label=\"simple tabs example\" variant=\"fullWidth\">\n          <Tab label=\"Orders\" {...a11yProps(0)}/>\n          <Tab label=\"Routes\" {...a11yProps(1)}/>\n          <Tab label=\"Drivers\" {...a11yProps(2)} disabled/>\n        </Tabs>\n      </AppBar>\n      <Grid container spacing={1}>\n        <Grid item xs={12} sm={6} direction=\"column\" justify=\"center\" className={classes.test} >\n          <TabPanel value={tabValue} index={0} >\n            <form onSubmit={(e) => createOrder(e)} >\n                <TextField id=\"googleOrigin\" value={origin} inputRef={originRef} placeholder='Enter origin' onChange={(e) => setOrigin(e.target.value)}\n                  type=\"text\" required />\n                <TextField id=\"orderDescript\" value={orderDescription} placeholder='Enter freight description'\n                  onChange={(e) => setOrderDescription(e.target.value)} type=\"text\" />\n                <TextField id=\"googleDest\" value={destination} inputRef={destRef} placeholder='Enter destination'\n                  onChange={(e) => { setDestination(e.target.value) }} type=\"text\" required />\n                <Button color=\"primary\" variant=\"contained\" type=\"submit\">add order</Button>\n            </form>\n          </TabPanel>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <div id=\"map\" ref={mapRef} className=\"googleMap\"></div>\n        </Grid>\n\n        <Grid item xs={12}>\n          <TabPanel value={tabValue} index={1}>\n            <GenRoutes orderMap={orderMap} removeOrders={() => removeOrderPolylines()} />\n          </TabPanel>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default App;\n//<Button color=\"primary\" variant=\"contained\" onClick={() => toggleOrderPolylines()}>toggle order paths</Button>\n\n\n//<button onClick={() => toggleOrderPolylines()}>toggle order paths</button>\n\n{/* <form >\n<input id=\"googleOrigin\" value={origin} ref={originRef} placeholder='Enter origin'\n  onChange={(e) => setOrigin(e.target.value)} type=\"text\" required />\n<input id=\"orderDescript\" value={orderDescription} placeholder='Enter freight description' onChange={(e) => setOrderDescription(e.target.value)} type=\"text\" />\n<input id=\"googleDest\" value={destination}  ref={destRef} placeholder='Enter destination'\n  onChange={(e) => {setDestination(e.target.value)}} type=\"text\" required />\n<button type=\"submit\">add order</button>\n</form> */}","/home/a970747/coding/dispatcher/src/store/reducers/orderReducer.js",[],"/home/a970747/coding/dispatcher/src/store/reducers/routeReducer.js",[],"/home/a970747/coding/dispatcher/src/store/actions/orderAction.js",[],"/home/a970747/coding/dispatcher/src/store/actions/routeAction.js",[],"/home/a970747/coding/dispatcher/src/components/GenRoutes.js",["50","51","52","53","54"],"import React, {useEffect, useState} from 'react';\nimport {addRoute} from '../store/actions/routeAction'\nimport {deleteAllOrders} from '../store/actions/orderAction'\nimport {useSelector, useDispatch} from 'react-redux';\nimport {Button, ButtonGroup} from '@material-ui/core';\n\nfunction GenRoutes({orderMap, removeOrders}) {\n  const [indexes, setIndexes] = useState([]);\n  const [result, setResult] = useState([]);\n  const [route, setRoute] = useState('');\n  const [stopsArray, setStopsArray] = useState([]);\n  const [polylineArray, setPolylineArray] = useState([]);\n  const orders = useSelector(state => state.orders);\n  const routes = useSelector(state => state.routes);\n  const dispatch = useDispatch();\n\n  useEffect(() => {if(orders.length > 0) calcStraightLineDist()}, [orders]);\n\n  useEffect(() => {\n    let tempArray = [];\n    orders.forEach((each, index) => tempArray.push(index))\n    setIndexes(tempArray);\n  }, [orders])\n\n  useEffect(() => {\n    mapRoutes(routes);\n  }, [routes])\n\n  async function optimize() {\n    let tempArray = [...indexes];\n    let result = getPermutations(tempArray);\n    let shortest = getShortest(result);\n    let newRoute = await drawRoute(result[shortest.index]);\n    let stops = getStops(result[shortest.index])\n    setRoute(newRoute);\n    setStopsArray(stops);\n    setResult(result);\n  }\n\n  function createRoute() {\n    let routeObj = {};\n    routeObj.path = stopsArray;\n    routeObj.route = route;\n    routeObj.orders = orders;\n\n    dispatch(addRoute(routeObj));\n    dispatch(deleteAllOrders())\n    removeOrders();\n  }\n\n  function getPermutations(array) {\n    let ret = [];\n  \n    for (let i = 0; i < array.length; i = i + 1) {\n      let rest = getPermutations(array.slice(0, i).concat(array.slice(i + 1)));\n  \n      if(!rest.length) {\n        ret.push([array[i]])\n      } else {\n        for(let j = 0; j < rest.length; j = j + 1) {\n          ret.push([array[i]].concat(rest[j]))\n        }\n      }\n    }\n    return ret\n  };\n  \n  function getShortest(result) {\n    const length = indexes.length;\n    const distArray = [];\n\n    const distMap = new Map();\n    orders.forEach( (each, index) => {\n      distMap.set(index, each.strtLnDist);\n    })\n    \n    for(let i = 0; i < result.length; i++) {\n      const totalDist = result[i].reduce((accum, curr, index, arr) => {\n        let total = 0;\n        if(distMap.has(curr)) total += distMap.get(curr);\n        if(index + 1 < length) {\n          const next = '' + curr + arr[index + 1];\n          if(distMap.has(next)) {\n            total += distMap.get(next)\n          } else {\n            const dist = calcStraightLineDist(orders[curr].destination.geoInfo, orders[arr[index + 1]].origin.geoInfo)\n            distMap.set(next, dist);\n            total += dist;\n          }\n        }\n        return accum + total;\n      }, 0)\n      distArray.push(totalDist);\n    };\n\n    let singleResult = distArray.reduce((accum, curr, index) => {\n      if(index == 0) return {dist: curr, index};\n      if(accum.dist > curr) return {dist: curr, index};\n      return accum;\n    }, {});\n    \n    return singleResult\n  }\n\n  function drawRoute(shortestRoute) {\n    const latLngSet = [];\n    for(let i = 0; i < shortestRoute.length; i++){\n      latLngSet.push(new window.google.maps.LatLng(orders[shortestRoute[i]].origin.geoInfo));\n      latLngSet.push(new window.google.maps.LatLng(orders[shortestRoute[i]].destination.geoInfo))\n    }\n    const wayPoints = latLngSet\n      .filter((item, i) => (i !== 0 && i !== (latLngSet.length -1)))\n      .map( item => { return {location: item, stopover: false}})\n\n    const directionsService = new window.google.maps.DirectionsService();\n\n    let req = {\n      origin: latLngSet[0],\n      destination: latLngSet[latLngSet.length - 1],\n      waypoints: wayPoints,\n      optimizeWaypoints: false,\n      travelMode: 'DRIVING'\n    }\n    \n    return new Promise((resolve, reject) => {\n      directionsService.route(req, (res, status) => {\n        if(status==='OK') {\n          resolve(res.routes[0].overview_polyline)\n        } else {\n          reject(status);\n        }\n      })\n    })\n  }\n\n  function getStops(route) {\n    const stopsArray = [];\n    for(let i = 0; i < route.length; i++){\n      stopsArray.push(orders[route[i]].origin.full_address);\n      stopsArray.push(orders[route[i]].destination.full_address);\n    }\n\n    const filteredStops = stopsArray.filter((stop, index) => {\n      if(index > 0) {\n        if(stop !== stopsArray[index - 1]) return stop;\n      } else { \n        return stop \n      };\n    })\n\n    return filteredStops;\n  }\n\n  function mapRoutes(routes) {\n    removeRoutePolylines();\n    let polycopy = []\n    routes.forEach(route => {\n      const decodedPath = new window.google.maps.geometry.encoding.decodePath(route.route);\n      let polyline = new window.google.maps.Polyline({\n        path: decodedPath,\n        strokeColor: route.color,\n        strokeOpacity: 1.0,\n        strokeWeight: 3,\n      });\n      polyline.setMap(orderMap);\n      polycopy.push(polyline);\n    })\n    setPolylineArray(polycopy);\n  }\n\n  function removeRoutePolylines() {\n    polylineArray.forEach(each => {\n      each.setMap(null);\n    });\n  }\n\n  function toggleRoutePolylines() {\n    polylineArray.forEach(polyline => {\n      (polyline.visible == false) ? polyline.setVisible(true) : polyline.setVisible(false)\n    });\n  }\n\n  function calcStraightLineDist(start, end) {\n    const origin = new window.google.maps.LatLng(start);\n    const dest = new window.google.maps.LatLng(end);\n\n    let distance = window.google.maps.geometry.spherical.computeDistanceBetween(origin, dest);\n    let kms  = distance/1000;\n    \n    return kms\n  }\n\n  return (\n    <ButtonGroup color=\"primary\" variant=\"contained\">\n      <Button onClick={() => optimize()}>1. run the algorithm</Button>\n      <Button onClick={() => createRoute()}>2. create route</Button>\n      <Button onClick={() => toggleRoutePolylines()}>hide routes</Button>\n      <Button onClick={() => removeRoutePolylines()}>remove routes</Button>\n    </ButtonGroup>\n  );\n}\n\nexport default GenRoutes;","/home/a970747/coding/dispatcher/src/components/material-components/TabPanel.js",["55","56"],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":5,"column":26,"nodeType":"63","messageId":"64","endLine":5,"endColumn":35},{"ruleId":"61","severity":1,"message":"65","line":6,"column":8,"nodeType":"63","messageId":"64","endLine":6,"endColumn":11},{"ruleId":"61","severity":1,"message":"66","line":9,"column":8,"nodeType":"63","messageId":"64","endLine":9,"endColumn":11},{"ruleId":"67","severity":1,"message":"68","line":59,"column":6,"nodeType":"69","endLine":59,"endColumn":16,"suggestions":"70"},{"ruleId":"67","severity":1,"message":"71","line":63,"column":6,"nodeType":"69","endLine":63,"endColumn":19,"suggestions":"72"},{"ruleId":"67","severity":1,"message":"73","line":67,"column":6,"nodeType":"69","endLine":67,"endColumn":17,"suggestions":"74"},{"ruleId":"67","severity":1,"message":"75","line":71,"column":6,"nodeType":"69","endLine":71,"endColumn":14,"suggestions":"76"},{"ruleId":"77","severity":1,"message":"78","line":208,"column":20,"nodeType":"79","messageId":"80","endLine":208,"endColumn":22},{"ruleId":"61","severity":1,"message":"81","line":226,"column":12,"nodeType":"63","messageId":"64","endLine":226,"endColumn":32},{"ruleId":"77","severity":1,"message":"78","line":228,"column":25,"nodeType":"79","messageId":"80","endLine":228,"endColumn":27},{"ruleId":"82","severity":1,"message":"83","line":288,"column":1,"nodeType":"84","messageId":"85","endLine":295,"endColumn":12},{"ruleId":"61","severity":1,"message":"86","line":9,"column":10,"nodeType":"63","messageId":"64","endLine":9,"endColumn":16},{"ruleId":"67","severity":1,"message":"87","line":27,"column":6,"nodeType":"69","endLine":27,"endColumn":14,"suggestions":"88"},{"ruleId":"77","severity":1,"message":"78","line":97,"column":16,"nodeType":"79","messageId":"80","endLine":97,"endColumn":18},{"ruleId":"89","severity":1,"message":"90","line":143,"column":59,"nodeType":"91","messageId":"92","endLine":143,"endColumn":61},{"ruleId":"77","severity":1,"message":"78","line":179,"column":25,"nodeType":"79","messageId":"80","endLine":179,"endColumn":27},{"ruleId":"61","severity":1,"message":"93","line":1,"column":8,"nodeType":"63","messageId":"64","endLine":1,"endColumn":18},{"ruleId":"61","severity":1,"message":"65","line":2,"column":8,"nodeType":"63","messageId":"64","endLine":2,"endColumn":11},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Box' is defined but never used.","'app' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setAutoComplete'. Either include it or remove the dependency array.","ArrayExpression",["96"],"React Hook useEffect has a missing dependency: 'originMarker'. Either include it or remove the dependency array.",["97"],"React Hook useEffect has a missing dependency: 'destMarker'. Either include it or remove the dependency array.",["98"],"React Hook useEffect has a missing dependency: 'mapOrders'. Either include it or remove the dependency array.",["99"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'toggleOrderPolylines' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'result' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'mapRoutes'. Either include it or remove the dependency array.",["100"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Typography' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},"Update the dependencies array to be: [orderMap, setAutoComplete]",{"range":"111","text":"112"},"Update the dependencies array to be: [originMarker, originPlace]",{"range":"113","text":"114"},"Update the dependencies array to be: [destMarker, destPlace]",{"range":"115","text":"116"},"Update the dependencies array to be: [mapOrders, orders]",{"range":"117","text":"118"},"Update the dependencies array to be: [mapRoutes, routes]",{"range":"119","text":"120"},[1768,1778],"[orderMap, setAutoComplete]",[1854,1867],"[originMarker, originPlace]",[1939,1950],"[destMarker, destPlace]",[1995,2003],"[mapOrders, orders]",[977,985],"[mapRoutes, routes]"]